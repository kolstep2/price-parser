"""
Streamlit Price Parser with Per-Supplier Templates
-------------------------------------------------
Run locally:
  pip install -r requirements.txt
  streamlit run streamlit_price_template_app.py

requirements.txt (create this file alongside the app):
  streamlit>=1.36
  pandas>=2.2
  openpyxl>=3.1
  numpy>=1.26

Notes:
- Templates can be stored locally in the ./templates folder (automatic) or downloaded/uploaded as JSON via the UI.
- Works for .xlsx and .xls (via openpyxl for .xlsx). For .xls you may need xlrd < 2.0.0; if necessary add "xlrd==1.2.0" to requirements.
- If deploying to Streamlit Cloud (no persistent disk), prefer downloading templates and re-uploading them when needed.
"""

from __future__ import annotations
import io
import json
import os
import re
import hashlib
from dataclasses import dataclass, asdict
from typing import Dict, Optional, List, Any

import numpy as np
import pandas as pd
import streamlit as st

TEMPLATE_DIR = "templates"
STANDARD_FIELDS = [
    "supplier",
    "sheet",
    "header_row",
    "name_col",
    "size_col",
    "price_col",
    "currency_col",
    "sku_col",
    "qty_col",
    "uom_col",
    "regex_extract_size_from",
    "size_regex",
    "price_regex",
    "price_multiplier",
    "drop_na_price",
    "skip_top_rows",
    "skip_bottom_rows",
    "filters",
]

# ---------- Utilities ----------

def ensure_dir(path: str):
    try:
        os.makedirs(path, exist_ok=True)
    except Exception:
        pass


def file_fingerprint(file_bytes: bytes) -> str:
    return hashlib.sha1(file_bytes).hexdigest()[:12]


@dataclass
class PriceTemplate:
    supplier: str
    sheet: Optional[str] = None
    header_row: int = 0  # zero-based index in pandas
    name_col: Optional[str] = None
    size_col: Optional[str] = None
    price_col: Optional[str] = None
    currency_col: Optional[str] = None
    sku_col: Optional[str] = None
    qty_col: Optional[str] = None
    uom_col: Optional[str] = None

    # extraction helpers
    regex_extract_size_from: Optional[str] = None  # one of: None, "name_col", "size_col"
    size_regex: Optional[str] = None               # e.g., r"(\d+\s?[xX]\s?\d+)|\b(\d+(?:[.,]\d+)?)\s?(mm|cm|m)\b"
    price_regex: Optional[str] = None              # e.g., r"([0-9]+[.,]?[0-9]*)"
    price_multiplier: float = 1.0                  # convert per-100 units, etc.

    drop_na_price: bool = True
    skip_top_rows: int = 0
    skip_bottom_rows: int = 0

    # optional filters like {"price_min": 0, "include_text": "PVC"}
    filters: Dict[str, Any] = None

    def to_json(self) -> str:
        d = asdict(self)
        return json.dumps(d, ensure_ascii=False, indent=2)

    @staticmethod
    def from_json(s: str) -> "PriceTemplate":
        data = json.loads(s)
        return PriceTemplate(**data)


# ---------- Template Persistence ----------

def list_templates() -> List[str]:
    ensure_dir(TEMPLATE_DIR)
    try:
        files = [f for f in os.listdir(TEMPLATE_DIR) if f.endswith(".json")]
        return sorted(files)
    except Exception:
        return []


def save_template(t: PriceTemplate) -> str:
    ensure_dir(TEMPLATE_DIR)
    fname = re.sub(r"[^\w\-]+", "_", t.supplier.strip()) or "template"
    # allow multiple versions per supplier by sheet name
    suffix = f"__{re.sub(r'[^\w\-]+','_', (t.sheet or 'any'))}"
    path = os.path.join(TEMPLATE_DIR, f"{fname}{suffix}.json")
    with open(path, "w", encoding="utf-8") as f:
        f.write(t.to_json())
    return path


def load_template(path_or_name: str) -> PriceTemplate:
    path = path_or_name
    if not os.path.exists(path):
        path = os.path.join(TEMPLATE_DIR, path_or_name)
    with open(path, "r", encoding="utf-8") as f:
        return PriceTemplate.from_json(f.read())


# ---------- Parsing Helpers ----------

def try_read_excel(uploaded_file, sheet_name: Optional[str] = None, header_row: int = 0,
                   skip_top: int = 0, skip_bottom: int = 0) -> pd.DataFrame:
    # —á–∏—Ç–∞–µ–º –±–µ–∑ header, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
    xls = pd.ExcelFile(uploaded_file)
    target_sheet = sheet_name or xls.sheet_names[0]
    df_raw = xls.parse(target_sheet, header=None, dtype=str)

    # –≤–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ —Å–≤–µ—Ä—Ö—É/—Å–Ω–∏–∑—É
    if skip_top:
        df_raw = df_raw.iloc[skip_top:]
    if skip_bottom:
        df_raw = df_raw.iloc[:-skip_bottom] if skip_bottom < len(df_raw) else df_raw.iloc[:0]

    # –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏
    if header_row >= len(df_raw):
        header_row = 0

    header_series = df_raw.iloc[header_row].fillna("")

    # –æ—á–∏—Å—Ç–∫–∞ –∏ –¥–µ–¥—É–ø –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (—á—Ç–æ–±—ã Streamlit/Arrow –Ω–µ –ø–∞–¥–∞–ª)
    names = [' '.join(str(x).split()) for x in header_series.tolist()]
    cleaned: List[str] = []
    seen: Dict[str, int] = {}
    for i, n in enumerate(names):
        # –ø—É—Å—Ç—ã–µ –∏ 'Unnamed: ...' / 'nan' / 'none' -> col_#
        if not n or re.match(r"^(unnamed(:.*)?|none|nan)$", n, re.IGNORECASE):
            n = f"col_{i+1}"
        # –¥–µ–ª–∞–µ–º –∏–º–µ–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ (–¥–æ–±–∞–≤–ª—è–µ–º _1, _2, ...)
        if n in seen:
            seen[n] += 1
            n = f"{n}_{seen[n]}"
        else:
            seen[n] = 0
        cleaned.append(n)

    # –ø—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    df = df_raw.iloc[header_row + 1:].copy()
    df.columns = cleaned
    df = df.reset_index(drop=True)

    # –≤—ã–∫–∏–¥—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    df = df.dropna(axis=1, how="all")

    # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –µ—â—ë —Ä–∞–∑ —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º–µ–Ω–∞, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω—É–∂–Ω–æ
    if len(df.columns) != len(set(df.columns)):
        seen2: Dict[str, int] = {}
        new_cols: List[str] = []
        for c in list(df.columns):
            n = str(c)
            if n in seen2:
                seen2[n] += 1
                n = f"{n}_{seen2[n]}"
            else:
                seen2[n] = 0
            new_cols.append(n)
        df.columns = new_cols

    return df


def normalize_price(val: Any, price_regex: Optional[str]) -> Optional[float]:
    if val is None:
        return None
    s = str(val)
    if not s or s.strip().lower() in {"nan", "none", ""}:
        return None
    if price_regex:
        m = re.search(price_regex, s)
        if m:
            s = m.group(1)
    # replace comma decimal, strip spaces
    s = s.replace(" ", "").replace("\u00a0", "").replace(",", ".")
    # remove non number / dot / minus
    s = re.sub(r"[^0-9.\-]", "", s)
    try:
        return float(s)
    except Exception:
        return None


def extract_size(row: pd.Series, t: PriceTemplate) -> Optional[str]:
    src = None
    if t.regex_extract_size_from == "name_col" and t.name_col:
        src = row.get(t.name_col)
    elif t.regex_extract_size_from == "size_col" and t.size_col:
        src = row.get(t.size_col)
    if src is None:
        return row.get(t.size_col) if t.size_col else None
    if not t.size_regex:
        return src
    m = re.search(t.size_regex, str(src))
    if m:
        return m.group(0)
    return None


def apply_template(df: pd.DataFrame, t: PriceTemplate) -> pd.DataFrame:
    out = pd.DataFrame()
    if t.name_col and t.name_col in df.columns:
        out["name"] = df[t.name_col].astype(str)
    else:
        out["name"] = np.nan
    out["size"] = df.apply(lambda r: extract_size(r, t), axis=1)

    if t.price_col and t.price_col in df.columns:
        prices = df[t.price_col].apply(lambda v: normalize_price(v, t.price_regex))
    else:
        prices = pd.Series([None] * len(df))
    if t.price_multiplier and t.price_multiplier != 1:
        prices = prices.apply(lambda x: x * t.price_multiplier if x is not None else x)
    out["price"] = prices

    if t.currency_col and t.currency_col in df.columns:
        out["currency"] = df[t.currency_col]
    else:
        out["currency"] = ""

    for src, dst in [(t.sku_col, "sku"), (t.qty_col, "qty"), (t.uom_col, "uom")]:
        if src and src in df.columns:
            out[dst] = df[src]
        else:
            out[dst] = ""

    # optional filtering
    if t.drop_na_price:
        out = out[~out["price"].isna()]
    if t.filters:
        f = t.filters
        if isinstance(f, dict):
            if "price_min" in f:
                out = out[(out["price"].isna()) | (out["price"] >= float(f["price_min"]))]
            if "price_max" in f:
                out = out[(out["price"].isna()) | (out["price"] <= float(f["price_max"]))]
            if txt := f.get("include_text"):
                out = out[out["name"].astype(str).str.contains(str(txt), case=False, na=False)]
            if excl := f.get("exclude_text"):
                out = out[~out["name"].astype(str).str.contains(str(excl), case=False, na=False)]

    # clean index
    out = out.reset_index(drop=True)
    return out


# ---------- UI ----------

st.set_page_config(page_title="–ü—Ä–∞–π—Å-–ø–∞—Ä—Å–µ—Ä —Å —à–∞–±–ª–æ–Ω–∞–º–∏", layout="wide")
st.title("üß© –ü—Ä–∞–π—Å‚Äë–ø–∞—Ä—Å–µ—Ä —Å —à–∞–±–ª–æ–Ω–∞–º–∏ (Streamlit)")

with st.sidebar:
    st.header("–®–∞–≥–∏")
    st.markdown("1) –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞\n\n2) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ª–∏—Å—Ç–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞\n\n3) –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–∞\n\n4) –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä\n\n5) –°–æ—Ö—Ä–∞–Ω–∏—Ç—å / –≠–∫—Å–ø–æ—Ä—Ç")
    st.divider()
    st.caption("–ü–æ–¥—Å–∫–∞–∑–∫–∞: –¥–ª—è .xls –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è xlrd==1.2.0")

# Session state
ss = st.session_state
if "templates_cache" not in ss:
    ss.templates_cache = {}
if "active_template" not in ss:
    ss.active_template = None

# 1) Upload
uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel (.xlsx/.xls)", type=["xlsx", "xls"], accept_multiple_files=False)

if uploaded:
    # read basic info
    uploaded_bytes = uploaded.getvalue()
    fp = file_fingerprint(uploaded_bytes)
    xls = pd.ExcelFile(io.BytesIO(uploaded_bytes))
    st.success(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω ‚úÖ | –ü–∞–ª—å—á–∏–∫: {fp} | –õ–∏—Å—Ç—ã: {', '.join(xls.sheet_names)}")

    # 2) Sheet + header row + trimming
    st.subheader("üßæ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ª–∏—Å—Ç–∞")
    colA, colB, colC, colD = st.columns([2,1,1,1])
    with colA:
        sheet = st.selectbox("–õ–∏—Å—Ç", options=xls.sheet_names)
    with colB:
        skip_top = st.number_input("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–µ—Ä—Ö–Ω–∏—Ö —Å—Ç—Ä–æ–∫", min_value=0, max_value=500, value=0)
    with colC:
        skip_bottom = st.number_input("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∏–∂–Ω–∏—Ö —Å—Ç—Ä–æ–∫", min_value=0, max_value=500, value=0)
    with colD:
        header_row = st.number_input("–°—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞)", min_value=0, max_value=100, value=0,
                                     help="–ù—É–ª–µ–≤–∞—è = –ø–µ—Ä–≤–∞—è –≤–∏–¥–∏–º–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞")

    df_preview = try_read_excel(io.BytesIO(uploaded_bytes), sheet_name=sheet, header_row=header_row,
                                skip_top=skip_top, skip_bottom=skip_bottom)

    st.caption("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ–±—Ä–µ–∑–∫–∏:")
    st.dataframe(df_preview.head(50), use_container_width=True)

    # 3) Template config
    st.subheader("üß© –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–∞")

    # Auto-suggest supplier name from filename
    default_supplier = re.sub(r"\.[^.]+$", "", uploaded.name)
    default_supplier = re.sub(r"[^\w\-]+", " ", default_supplier).strip()

    with st.expander("–ó–∞–≥—Ä—É–∑–∫–∞/–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤", expanded=True):
        c1, c2, c3 = st.columns([1,1,2])
        with c1:
            supplier = st.text_input("–ü–æ—Å—Ç–∞–≤—â–∏–∫ (–∏–º—è —à–∞–±–ª–æ–Ω–∞)", value=default_supplier or "–ü–æ—Å—Ç–∞–≤—â–∏–∫")
        with c2:
            # discover local templates
            available = ["‚Äî –≤—ã–±—Ä–∞—Ç—å ‚Äî"] + list_templates()
            chosen_name = st.selectbox("–ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω", options=available)
            if chosen_name != "‚Äî –≤—ã–±—Ä–∞—Ç—å ‚Äî":
                try:
                    t_loaded = load_template(chosen_name)
                    ss.active_template = t_loaded
                    st.success(f"–®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {chosen_name}")
                except Exception as e:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω: {e}")
        with c3:
            up_json = st.file_uploader("–ò–º–ø–æ—Ä—Ç —à–∞–±–ª–æ–Ω–∞ (.json)", type=["json"], accept_multiple_files=False, key="tmplup")
            if up_json is not None:
                try:
                    t_loaded = PriceTemplate.from_json(up_json.getvalue().decode("utf-8"))
                    ss.active_template = t_loaded
                    st.success("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —à–∞–±–ª–æ–Ω –∏–∑ JSON")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")

    # current template or new
    t: PriceTemplate = ss.active_template or PriceTemplate(supplier=supplier, sheet=sheet, header_row=header_row,
                                                          skip_top_rows=skip_top, skip_bottom_rows=skip_bottom,
                                                          filters={})

    # Refresh template sheet/header if changed
    t.supplier = supplier
    t.sheet = sheet
    t.header_row = int(header_row)
    t.skip_top_rows = int(skip_top)
    t.skip_bottom_rows = int(skip_bottom)

    st.markdown("**–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤:**")
    cols = list(df_preview.columns)
    ca, cb, cc = st.columns(3)
    with ca:
        t.name_col = st.selectbox("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", options=["‚Äî –Ω–µ—Ç ‚Äî"] + cols, index=(cols.index(t.name_col) + 1) if t.name_col in cols else 0)
        t.size_col = st.selectbox("–†–∞–∑–º–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)", options=["‚Äî –Ω–µ—Ç ‚Äî"] + cols, index=(cols.index(t.size_col) + 1) if t.size_col in cols else 0)
        t.sku_col = st.selectbox("–ê—Ä—Ç–∏–∫—É–ª (–µ—Å–ª–∏ –µ—Å—Ç—å)", options=["‚Äî –Ω–µ—Ç ‚Äî"] + cols, index=(cols.index(t.sku_col) + 1) if t.sku_col in cols else 0)
    with cb:
        t.price_col = st.selectbox("–¶–µ–Ω–∞", options=["‚Äî –Ω–µ—Ç ‚Äî"] + cols, index=(cols.index(t.price_col) + 1) if t.price_col in cols else 0)
        t.currency_col = st.selectbox("–í–∞–ª—é—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)", options=["‚Äî –Ω–µ—Ç ‚Äî"] + cols, index=(cols.index(t.currency_col) + 1) if t.currency_col in cols else 0)
        t.qty_col = st.selectbox("–ö–æ–ª-–≤–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)", options=["‚Äî –Ω–µ—Ç ‚Äî"] + cols, index=(cols.index(t.qty_col) + 1) if t.qty_col in cols else 0)
    with cc:
        t.uom_col = st.selectbox("–ï–¥.–∏–∑–º. (–µ—Å–ª–∏ –µ—Å—Ç—å)", options=["‚Äî –Ω–µ—Ç ‚Äî"] + cols, index=(cols.index(t.uom_col) + 1) if t.uom_col in cols else 0)
        t.price_regex = st.text_input("Regex –¥–ª—è —Ü–µ–Ω—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", value=t.price_regex or "([0-9]+[.,]?[0-9]*)",
                                      help="–ï—Å–ª–∏ –≤ —è—á–µ–π–∫–µ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç —Å –≤–∞–ª—é—Ç–æ–π ‚Äî –≤—ã—Ç–∞—â–∏–º —á–∏—Å–ª–æ –ø–æ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø–µ")
        t.price_multiplier = float(st.number_input("–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω—ã", value=float(t.price_multiplier or 1.0), step=0.1,
                                                  help="–ù–∞–ø—Ä.: 0.01 –µ—Å–ª–∏ —Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∑–∞ 100 —à—Ç."))

    st.markdown("**–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ —à–∞–±–ª–æ–Ω—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):**")
    cd, ce = st.columns([2,3])
    with cd:
        src_choice = st.selectbox("–ò–∑–≤–ª–µ–∫–∞—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑", options=["‚Äî –Ω–µ –∏–∑–≤–ª–µ–∫–∞—Ç—å ‚Äî", "name_col", "size_col"],
                                  index={None:0, "name_col":1, "size_col":2}.get(t.regex_extract_size_from or None, 0))
        t.regex_extract_size_from = None if src_choice == "‚Äî –Ω–µ –∏–∑–≤–ª–µ–∫–∞—Ç—å ‚Äî" else src_choice
    with ce:
        t.size_regex = st.text_input("Regex –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞", value=t.size_regex or r"(\d+\s?[xX]\s?\d+)|(\d+(?:[.,]\d+)?)\s?(mm|cm|m)\b",
                                     help="–ù–∞–ø—Ä–∏–º–µ—Ä: 10x20, 10 x 20, –∏–ª–∏ 12 mm")

    st.markdown("**–§–∏–ª—å—Ç—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):**")
    cf, cg, ch, ci = st.columns(4)
    with cf:
        drop_na = st.checkbox("–£–±–∏—Ä–∞—Ç—å –ø—É—Å—Ç—ã–µ —Ü–µ–Ω—ã", value=bool(t.drop_na_price))
        t.drop_na_price = drop_na
    with cg:
        pmin = st.text_input("–ú–∏–Ω. —Ü–µ–Ω–∞", value=str((t.filters or {}).get("price_min", "")))
    with ch:
        pmax = st.text_input("–ú–∞–∫—Å. —Ü–µ–Ω–∞", value=str((t.filters or {}).get("price_max", "")))
    with ci:
        inc = st.text_input("–í–∫–ª—é—á–∞—Ç—å —Ç–µ–∫—Å—Ç", value=(t.filters or {}).get("include_text", ""))
        exc = st.text_input("–ò—Å–∫–ª—é—á–∞—Ç—å —Ç–µ–∫—Å—Ç", value=(t.filters or {}).get("exclude_text", ""))

    t.filters = {}
    if pmin.strip():
        t.filters["price_min"] = pmin
    if pmax.strip():
        t.filters["price_max"] = pmax
    if inc.strip():
        t.filters["include_text"] = inc
    if exc.strip():
        t.filters["exclude_text"] = exc

    # 4) Apply template preview
    st.subheader("üîé –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    # handle "‚Äî –Ω–µ—Ç ‚Äî" selections
    for fld in ["name_col","size_col","price_col","currency_col","sku_col","qty_col","uom_col"]:
        v = getattr(t, fld)
        if v == "‚Äî –Ω–µ—Ç ‚Äî":
            setattr(t, fld, None)
    standardized = apply_template(df_preview, t)
    st.dataframe(standardized.head(200), use_container_width=True)
    st.caption(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {len(standardized)}")

    # 5) Save / Export
    st.subheader("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —ç–∫—Å–ø–æ—Ä—Ç")

    csa, csb, csc, csd = st.columns(4)
    with csa:
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ (./templates)"):
            try:
                path = save_template(t)
                st.success(f"–®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {path}")
                ss.active_template = t
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    with csb:
        st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω JSON", data=t.to_json().encode("utf-8"),
                           file_name=f"template_{re.sub(r'[^\w\-]+','_', t.supplier)}.json",
                           mime="application/json")
    with csc:
        # Export CSV
        csv_bytes = standardized.to_csv(index=False).encode("utf-8-sig")
        st.download_button("‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç CSV", data=csv_bytes, file_name=f"{re.sub(r'[^\w\-]+','_', t.supplier)}_export.csv",
                           mime="text/csv")
    with csd:
        # Export Excel
        xbuf = io.BytesIO()
        with pd.ExcelWriter(xbuf, engine="openpyxl") as writer:
            standardized.to_excel(writer, index=False, sheet_name="export")
        st.download_button("‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç Excel", data=xbuf.getvalue(), file_name=f"{re.sub(r'[^\w\-]+','_', t.supplier)}_export.xlsx",
                           mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

    st.divider()
    st.markdown("#### ü§ñ –ê–≤—Ç–æ–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞")
    st.caption("–ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∞–π—Å–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ —à–∞–±–ª–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å JSON."
               " –ï—Å–ª–∏ –∏–º—è –ª–∏—Å—Ç–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç ‚Äî –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç—è–Ω—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

else:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
